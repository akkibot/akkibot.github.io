{"version":3,"sources":["component/Result.jsx","component/Akki.jsx","component/NavBar.jsx","App.js","serviceWorker.js","index.js"],"names":["randomNumber","min","max","Math","random","color","colorSelection","index","parseInt","Result","calculateResult","props","rawData","amount","days","mateWater","minLength","maxLength","minWidth","maxWidth","minHeight","maxHeight","taskRate","perDayWage","mwQuantity","round","renderBody","push","className","mateVal","console","log","excavation","waterVal","quantity","parseFloat","toFixed","resultsTotal","sum","count","length","width","height","result","oldSum","String","remainderVal","this","Component","AKKI","componentDidMount","M","AutoInit","elems","document","querySelectorAll","Modal","init","handleSubmit","e","preventDefault","setState","showResult","handleChange","target","name","value","handleWageChange","handleMateWaterRadio","renderModal","id","class","onClick","state","placeholder","type","onChange","htmlFor","checked","data-target","NavBar","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fae5eb38.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\n\r\nfunction randomNumber(min, max) {\r\n    return Math.random() * (max - min) + min;\r\n}\r\n\r\nconst color = [\"pink lighten-4\", \"yellow accent-2\"];\r\n\r\nfunction colorSelection(index) {\r\n    if (index >= 0 && index <= 5)\r\n        return \"blue lighten-4\";\r\n    var num = parseInt((index - 6) / 9);\r\n    if (num % 2 == 0)\r\n        return color[0];\r\n    else\r\n        return color[1];\r\n}\r\n\r\nexport default class Result extends Component {\r\n    calculateResult = () => {\r\n        const {\r\n            amount,\r\n            days,\r\n            mateWater,\r\n            minLength,\r\n            maxLength,\r\n            minWidth,\r\n            maxWidth,\r\n            minHeight,\r\n            maxHeight,\r\n            taskRate,\r\n            perDayWage\r\n        } = this.props.rawData;\r\n\r\n        const mwQuantity = Math.round(amount / (days * perDayWage * 50));\r\n\r\n        let renderBody = [];\r\n        renderBody.push(\r\n            <div className=\"row no-bottom-margin grey darken-4 white-text\">\r\n                <div className=\"col border s1\">No</div>\r\n                <div className=\"col border s2\">Length</div>\r\n                <div className=\"col border s2\">Width</div>\r\n                <div className=\"col border s2\">Height</div>\r\n                <div className=\"col border s2\">Result</div>\r\n                <div className=\"col border s3\">Cumulative</div>\r\n            </div>\r\n        )\r\n\r\n        var mateVal = Math.round(mwQuantity * perDayWage * days);\r\n        console.log(\"mateVal\", mateVal);\r\n\r\n        var waterVal = mateVal;\r\n        console.log(\"waterVal\", waterVal);\r\n\r\n        var excavation;\r\n        if (mateWater === \"true\") {\r\n            excavation = amount - 2 * mateVal;\r\n            console.log(\"excavation\", excavation);\r\n        } else {\r\n            mateVal = 0;\r\n            waterVal = 0;\r\n            excavation = amount;\r\n            console.log(\"excavation\", excavation);\r\n        }\r\n\r\n        var quantity = parseFloat(excavation / taskRate).toFixed(2);\r\n        console.log(\"quantity\", quantity);\r\n\r\n        let resultsTotal = 0;\r\n        let sum = 0, count = 0;\r\n        while (sum <= quantity) {\r\n            var length = randomNumber(minLength, maxLength).toFixed(1);\r\n            var width = randomNumber(minWidth, maxWidth).toFixed(1);\r\n            var height = randomNumber(minHeight, maxHeight).toFixed(2);\r\n            var result = parseFloat(length * width * height).toFixed(2);\r\n            result = parseFloat(result);\r\n            var oldSum = sum;\r\n            sum += result;\r\n            sum = parseFloat(parseFloat(sum).toFixed(2));\r\n\r\n\r\n            if (sum <= quantity) {\r\n\r\n                renderBody.push(\r\n                    <div className={`row no-bottom-margin ${colorSelection(count)}`}>\r\n                        <div className=\"col border s1\">1</div>\r\n                        <div className=\"col border s2\">{String(length)}</div>\r\n                        <div className=\"col border s2\">{String(width)}</div>\r\n                        <div className=\"col border s2\">{String(height)}</div>\r\n                        <div className=\"col border s2\">{String(result)}</div>\r\n                        <div className=\"col border s3\">{String(sum)}</div>\r\n                    </div>\r\n                )\r\n                console.log(\r\n                    \"1 * \" +\r\n                    length +\r\n                    \" * \" +\r\n                    width +\r\n                    \" * \" +\r\n                    height +\r\n                    \" = \" +\r\n                    result +\r\n                    \"     \" +\r\n                    sum\r\n                );\r\n                resultsTotal += parseFloat(result);\r\n            } else {\r\n                var remainderVal = quantity - oldSum;\r\n                remainderVal = parseFloat(parseFloat(remainderVal).toFixed(2));\r\n                length = randomNumber(minLength, maxLength).toFixed(1);\r\n                height = randomNumber(minHeight, maxHeight).toFixed(2);\r\n\r\n                width = remainderVal / (length * height);\r\n\r\n                result = parseFloat(length * width * height);\r\n\r\n                console.log(\"remainderVal\", remainderVal);\r\n                renderBody.push(\r\n                    <div className={`row no-bottom-margin ${colorSelection(count)}`}>\r\n                        <div className=\"col border s1\">1</div>\r\n                        <div className=\"col border s2\">{String(length)}</div>\r\n                        <div className=\"col border s2\">{String(width.toFixed(2))}</div>\r\n                        <div className=\"col border s2\">{String(height)}</div>\r\n                        <div className=\"col border s2\">{String(result.toFixed(2))}</div>\r\n                        <div className=\"col border s3\">{String(quantity)}</div>\r\n                    </div>\r\n                )\r\n                console.log(\r\n                    \"1 * \" +\r\n                    length +\r\n                    \" * \" +\r\n                    width.toFixed(2) +\r\n                    \" * \" +\r\n                    height +\r\n                    \" = \" +\r\n                    result.toFixed(2) +\r\n                    \"     \" +\r\n                    quantity\r\n                );\r\n                resultsTotal += parseFloat(result);\r\n            }\r\n            count += 1;\r\n        }\r\n\r\n        renderBody.push(\r\n            <div className=\"row no-bottom-margin lime accent-3\">\r\n                <div className=\"col border s7\">Total Quantity</div>\r\n                <div className=\"col border s2\">{String(resultsTotal.toFixed(2))}</div>\r\n                <div className=\"col border s3\">{String(resultsTotal.toFixed(2))}</div>\r\n            </div>\r\n        )\r\n        renderBody.push(\r\n            <div className=\"row no-bottom-margin lime accent-3\">\r\n                <div className=\"col border s9\">@rate</div>\r\n                <div className=\"col border s3\">{taskRate}</div>\r\n            </div>\r\n        )\r\n        renderBody.push(\r\n            <div className=\"row no-bottom-margin lime accent-3\">\r\n                <div className=\"col border s9\">Excavation Amount</div>\r\n                <div className=\"col border s3\">{excavation}</div>\r\n            </div>\r\n        )\r\n        mateWater === \"true\" && renderBody.push(\r\n            <div className=\"row no-bottom-margin  blue lighten-3\">\r\n                <div className=\"col border s9\">Mate Amount     ({`${mwQuantity}  *  ${perDayWage}  *  ${days}`})</div>\r\n                <div className=\"col border s3\">{mateVal}</div>\r\n            </div>\r\n        )\r\n        mateWater === \"true\" && renderBody.push(\r\n            <div className=\"row no-bottom-margin  blue lighten-3\">\r\n                <div className=\"col border s9\">Water Amount     ({`${mwQuantity}  *  ${perDayWage}  *  ${days}`})</div>\r\n                <div className=\"col border s3\">{mateVal}</div>\r\n            </div>\r\n        )\r\n\r\n        renderBody.push(\r\n            <Fragment>\r\n                <div className=\"row no-bottom-margin\"></div>\r\n                <div className=\"row no-bottom-margin orange lighten-2\">\r\n                    <div className=\"col border s9\">Total Amount</div>\r\n                    <div className=\"col border s3\">{excavation + (2 * mateVal)}</div>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n        renderBody.push(\r\n            <Fragment>\r\n                <div className=\"row no-bottom-margin\"></div>\r\n                <div className=\"row no-bottom-margin\">\r\n                    <div className=\"col border s9\">Total Iterations</div>\r\n                    <div className=\"col border s3\">{count}</div>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n\r\n        return (\r\n            <div>\r\n                {renderBody}\r\n            </div>\r\n        )\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.calculateResult()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport M from \"materialize-css/dist/js/materialize.min.js\";\r\nimport Result from \"./Result\";\r\n\r\nexport default class AKKI extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      amount: 40000,\r\n      days: 6,\r\n      mateWater: \"true\",\r\n      perDayWage: 193,\r\n      taskRate: 120.50,\r\n      minLength: 12,\r\n      maxLength: 17,\r\n      minWidth: 12,\r\n      maxWidth: 17,\r\n      minHeight: 0.10,\r\n      maxHeight: 0.18,\r\n      showResult: false\r\n    };\r\n  }\r\n  componentDidMount = () => {\r\n    M.AutoInit();\r\n    var elems = document.querySelectorAll('.modal');\r\n    M.Modal.init(elems);\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.setState({\r\n      showResult: true\r\n    })\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: parseFloat(e.target.value),\r\n      showResult: false\r\n    });\r\n  };\r\n \r\n  handleWageChange = (e) => {\r\n    var taskRate = ((((parseFloat(e.target.value))/159)*110.30)*(0.9)).toFixed(2);\r\n    this.setState({\r\n      [e.target.name]: parseFloat(e.target.value),\r\n      taskRate: taskRate,\r\n      showResult: false\r\n    });\r\n  };\r\n\r\n  handleMateWaterRadio = (e) => {\r\n    this.setState({\r\n      mateWater: e.target.value,\r\n      showResult: false\r\n    })\r\n  }\r\n\r\n  renderModal = () => {\r\n    return (\r\n      <div id=\"modal1\" class=\"modal\">\r\n        <div class=\"modal-content\">\r\n          <h4>Are you sure you want to re-calculate??</h4>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <span class=\"btn modal-close waves-effect waves-green btn-flat\" onClick={this.handleSubmit}>Yes</span>\r\n          <span class=\"btn modal-close waves-effect waves-green btn-flat\">No</span>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"akki\">\r\n        {this.renderModal()}\r\n        <div className=\"row section container\">\r\n          <form className=\"col s12\">\r\n            <div className=\"input-field col s12\">\r\n              <input\r\n                placeholder=\"Amount\"\r\n                id=\"amount\"\r\n                name=\"amount\"\r\n                type=\"number\"\r\n                value={this.state.amount}\r\n                onChange={this.handleChange}\r\n                className=\"validate\"\r\n              />\r\n              <label className=\"active\" htmlFor=\"amount\">Amount</label>\r\n            </div>\r\n\r\n            {/* Per Day Wage */}\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  placeholder=\"Per Day Wage\"\r\n                  id=\"perDayWage\"\r\n                  name=\"perDayWage\"\r\n                  type=\"number\"\r\n                  value={this.state.perDayWage}\r\n                  onChange={this.handleWageChange}\r\n                  className=\"validate\"\r\n                  min={1}\r\n                />\r\n                <label className=\"active\" htmlFor=\"perDayWage\">Per Day Wage</label>\r\n              </div>\r\n              {this.state.perDayWage ? <p>Task Rate: {this.state.taskRate}</p>:null}\r\n\r\n\r\n            {/* Mate Water */}\r\n            <div className=\"col left s9\">\r\n              <h6>Whether to Calculate Mate/Water</h6>\r\n            </div>\r\n            <div className=\"input-field col s3\">\r\n              <span>\r\n                <label>\r\n                  <input name=\"group2\" className=\"with-gap\" type=\"radio\" value={true} onChange={this.handleMateWaterRadio} checked={this.state.mateWater === \"true\"} />\r\n                  <span>Yes</span>\r\n                </label>\r\n              </span>\r\n              <span>\r\n                <label>\r\n                  <input name=\"group2\" className=\"with-gap\" type=\"radio\" value={false} onChange={this.handleMateWaterRadio} checked={this.state.mateWater === \"false\"} />\r\n                  <span>No</span>\r\n                </label>\r\n              </span>\r\n            </div>\r\n\r\n            {this.state.mateWater === \"true\" ? (\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  placeholder=\"No of Days\"\r\n                  id=\"days\"\r\n                  name=\"days\"\r\n                  type=\"number\"\r\n                  value={this.state.days}\r\n                  onChange={this.handleChange}\r\n                  className=\"validate\"\r\n                  min={1}\r\n                />\r\n                <label className=\"active\" htmlFor=\"days\">No of Days</label>\r\n              </div>\r\n            ) : null}\r\n\r\n            <div className=\"minmaxContainer\">\r\n              <div className=\"row\">\r\n                <div className=\"col left s12\">\r\n                  <h5>Enter Limit</h5>\r\n                </div>\r\n                <div className=\"col s4\">Length</div>\r\n                <div className=\"col s4\">Width</div>\r\n                <div className=\"col s4\">Height</div>\r\n              </div>\r\n\r\n              <div className=\"row\">\r\n                <div className=\"col s4\">\r\n                  <input\r\n                    placeholder=\"Min Length\"\r\n                    id=\"minLength\"\r\n                    name=\"minLength\"\r\n                    type=\"number\"\r\n                    value={this.state.minLength}\r\n                    onChange={this.handleChange}\r\n                    className=\"validate\"\r\n                  />\r\n                  <label className=\"active\" htmlFor=\"days\">Min Length</label>\r\n                </div>\r\n                <div className=\"col s4\">\r\n                  <input\r\n                    placeholder=\"Min Width\"\r\n                    id=\"minWidth\"\r\n                    name=\"minWidth\"\r\n                    type=\"number\"\r\n                    value={this.state.minWidth}\r\n                    onChange={this.handleChange}\r\n                    className=\"validate\"\r\n                  />\r\n                  <label className=\"active\" htmlFor=\"days\">Min Width</label>\r\n                </div>\r\n                <div className=\"col s4\">\r\n                  <input\r\n                    placeholder=\"Min Height\"\r\n                    id=\"minHeight\"\r\n                    name=\"minHeight\"\r\n                    type=\"number\"\r\n                    value={this.state.minHeight}\r\n                    onChange={this.handleChange}\r\n                    className=\"validate\"\r\n                  />\r\n                  <label className=\"active\" htmlFor=\"days\">Min Height</label>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"row\">\r\n                <div className=\"col s4\">\r\n                  <input\r\n                    placeholder=\"Max Length\"\r\n                    id=\"maxLength\"\r\n                    name=\"maxLength\"\r\n                    type=\"number\"\r\n                    value={this.state.maxLength}\r\n                    onChange={this.handleChange}\r\n                    className=\"validate\"\r\n                  />\r\n                  <label className=\"active\" htmlFor=\"days\">Max Length</label>\r\n                </div>\r\n                <div className=\"col s4\">\r\n                  <input\r\n                    placeholder=\"Max Width\"\r\n                    id=\"maxWidth\"\r\n                    name=\"maxWidth\"\r\n                    type=\"number\"\r\n                    value={this.state.maxWidth}\r\n                    onChange={this.handleChange}\r\n                    className=\"validate\"\r\n                  />\r\n                  <label className=\"active\" htmlFor=\"days\">Max Width</label>\r\n                </div>\r\n                <div className=\"col s4\">\r\n                  <input\r\n                    placeholder=\"Max Height\"\r\n                    id=\"maxHeight\"\r\n                    name=\"maxHeight\"\r\n                    type=\"number\"\r\n                    value={this.state.maxHeight}\r\n                    onChange={this.handleChange}\r\n                    className=\"validate\"\r\n                  />\r\n                  <label className=\"active\" htmlFor=\"days\">Max Height</label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <button\r\n              className=\"btn waves-effect waves-light modal-trigger purple darken-2\"\r\n              data-target={this.state.showResult ? \"modal1\" : null}\r\n              onClick={!this.state.showResult ? this.handleSubmit : () => { }}\r\n            >\r\n              Calculate\r\n              <i className=\"material-icons right\">send</i>\r\n            </button>\r\n          </form>\r\n        </div>\r\n        {this.state.showResult && <div className=\"row section\">\r\n          <Result rawData={this.state} />\r\n        </div>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function NavBar() {\r\n  return (\r\n    <nav>\r\n      <div class=\"nav-wrapper purple darken-4\">\r\n        <a href=\"#\" class=\"brand-logo center\">\r\n          Akki\r\n        </a>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport 'materialize-css/dist/css/materialize.min.css';\r\nimport './App.css';\r\nimport Akki from './component/Akki'\r\nimport NavBar from './component/NavBar';\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <NavBar />\r\n     <Akki />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}